def solution(n, times):
    answer = 0
    
    left = 1
    right = max(times) * n # 최대 시간 60
    
    while left < right :
        mid  = (left + right ) // 2 # 30 15
        total = 0
        
        for x in times : 
            total += mid // x # 4 + 3 = 7  / 2 + 1 = 3
        if total >= n :  # 7 >= 6
            right = mid # right = 30
        else :
            left = mid + 1
            
    answer = left
    return answer
  
  
  
  ------------------------------------
  
  문제 접근 방식
문제를 처음 보았을 때는 for 문을 돌면서 일일히 확인하는 문제인가 싶었지만
수의 범위가 너무 크기에 불가능해서 해당 방법으로는 풀 수 없다고 판단하여 이분 탐색의 개념에 대해 더 알아보고 문제에 접근했습니다.

문제의 핵심은 최소, 최대 범위를 구한 뒤 구하려고 하는 답을 이분 탐색으로 범위를 좁혀가며 답을 구하는 것 입니다.

문제에서 최대 범위는 심사관 중 가장 오래걸리는 심사관을 계속 검사 받는 경우입니다.
최소, 최대 범위의 중간값인 mid가 n명을 심사 할 수 있는 지 아닌 지를 파악하며 이분 탐색을 진행합니다.

n명을 심사 할 수 있다면, 답을 갱신하고, 최대 범위를 줄여봅니다.
n명을 심사 할 수 없다면, 최소범위를 늘려봅니다.
